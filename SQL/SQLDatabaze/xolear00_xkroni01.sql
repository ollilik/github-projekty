DROP TABLE dispozicni_pravo;
DROP TABLE internetove_bankovnictvi;
DROP TABLE platebni_karta;
DROP TABLE transakce;
DROP TABLE sluzba;
DROP TABLE sporici_ucet;
DROP TABLE bezny_ucet;
DROP TABLE ucet;
DROP TABLE klient;
DROP TABLE zamestnanec;
DROP TABLE pobocka;
DROP SEQUENCE zamestnanecid_seq;

CREATE TABLE pobocka (
    lokalita VARCHAR(20) NOT NULL ,
    nazev VARCHAR(100) NOT NULL , 
    pocet_zamestnancu INT NOT NULL , 
    PRIMARY KEY (lokalita)
);

CREATE TABLE zamestnanec (
    zamestnanecID INT,
    jmeno VARCHAR(20) NOT NULL ,
    prijmeni VARCHAR(20) NOT NULL ,
    adresa VARCHAR(50) NOT NULL ,
    lokalita VARCHAR(20) NOT NULL ,
    PRIMARY KEY (zamestnanecID),
    FOREIGN KEY (lokalita) REFERENCES pobocka(lokalita)
);

CREATE TABLE klient (
    klientID NUMBER GENERATED by default on null as IDENTITY,
    zamestnanecID INT NOT NULL,
    jmeno VARCHAR(20) NOT NULL ,
    prijmeni VARCHAR(20) NOT NULL ,
    adresa VARCHAR(50) NOT NULL ,
    PRIMARY KEY (klientID),
    FOREIGN KEY (zamestnanecID) REFERENCES zamestnanec(zamestnanecID)
);

CREATE TABLE ucet ( 
    ucetID NUMBER GENERATED by default on null as IDENTITY,
    klientID INT NOT NULL ,
    nazev VARCHAR(40) NOT NULL , 
    zustatek INT NOT NULL , 
    typ_uctu VARCHAR2(10) CHECK( typ_uctu IN ('bezny','sporici') ) NOT NULL , 
    pocet_disponentu INT NOT NULL , 
    PRIMARY KEY (ucetID),
    FOREIGN KEY (klientID) REFERENCES klient(klientID)
);

CREATE TABLE sporici_ucet ( 
    ucetID INT NOT NULL , 
    urok INT NOT NULL , 
    UNIQUE (ucetID),
    FOREIGN KEY (ucetID) REFERENCES ucet(ucetID)
);

CREATE TABLE bezny_ucet ( 
    ucetID INT NOT NULL , 
    limit INT NOT NULL , 
    UNIQUE (ucetID),
    FOREIGN KEY (ucetID) REFERENCES ucet(ucetID)
);

CREATE TABLE sluzba ( 
    sluzbaID NUMBER GENERATED by default on null as IDENTITY,
    typ_uctu VARCHAR2(10) CHECK( typ_uctu IN ('bezny','sporici') ) NOT NULL ,
    aktivovana NUMBER(1) CHECK( aktivovana IN (0,1) ) NOT NULL , 
    popis VARCHAR2(100) NOT NULL,
    PRIMARY KEY (sluzbaID)
);

CREATE TABLE dispozicni_pravo ( 
    pravoID NUMBER GENERATED by default on null as IDENTITY,
    klientID INT,
    ucetID INT NOT NULL , 
    typ_omezeni VARCHAR(50) NOT NULL , 
    PRIMARY KEY (pravoID), 
    FOREIGN KEY (ucetID) REFERENCES ucet(ucetID),
    FOREIGN KEY (klientID) REFERENCES klient(klientID)
);

CREATE TABLE internetove_bankovnictvi ( 
    interbankID NUMBER GENERATED by default on null as IDENTITY,
    klientID INT NOT NULL , 
    pocet_uctu INT NOT NULL , 
    PRIMARY KEY (interbankID), 
    UNIQUE (klientID),
    FOREIGN KEY (klientID) REFERENCES klient(klientID)
);

CREATE TABLE platebni_karta (
    cislo_karty NUMBER GENERATED by default on null as IDENTITY,
    klientID INT NOT NULL , 
    ucetID INT NOT NULL , 
    typ VARCHAR2(10) CHECK( typ IN ('kreditni','debitni') ) NOT NULL ,
    CONSTRAINT cislo_karty UNIQUE (cislo_karty, klientID, ucetID),
    FOREIGN KEY (klientID) REFERENCES klient(klientID),
    FOREIGN KEY (ucetID) REFERENCES ucet(ucetID)
);

CREATE TABLE transakce ( 
    transakceID NUMBER GENERATED by default on null as IDENTITY,
    klientID INT NOT NULL , 
    ucetID INT NOT NULL , 
    druhy_ucetID INT,
    castka INT NOT NULL ,
    cas TIMESTAMP NOT NULL , 
    operace VARCHAR2(10) CHECK( operace IN ('vyber','vklad','inkaso','odeslani','prijem') ) NOT NULL ,
    zamestnanecID INT, 
    CONSTRAINT transakceID UNIQUE (transakceID, klientID, ucetID, druhy_ucetID),
    FOREIGN KEY (klientID) REFERENCES klient(klientID),
    FOREIGN KEY (zamestnanecID) REFERENCES zamestnanec(zamestnanecID),
    FOREIGN KEY (ucetID) REFERENCES ucet(ucetID)
);

-- Trigger akualizace_zustatku
-- Po přidání transakce do databáze se aktualizuje zůstatek na účtu s kterým je transakce prováděna.
SET SERVEROUTPUT ON;
CREATE OR REPLACE TRIGGER akualizace_zustatku
AFTER INSERT ON transakce
FOR EACH ROW
BEGIN
    IF :NEW.operace = 'vklad' OR :NEW.operace = 'prijem' THEN
        UPDATE ucet 
        SET ucet.zustatek = ucet.zustatek + :NEW.castka
        WHERE ucet.ucetid = :NEW.ucetid;
    ELSE
        UPDATE ucet 
        SET ucet.zustatek = ucet.zustatek - :NEW.castka
        WHERE ucet.ucetid = :NEW.ucetid;
    END IF;
END;

-- auto increment primarního klíče u tabulky zamestnanec
CREATE SEQUENCE zamestnanecid_seq
    START WITH 1
    INCREMENT BY 1;

CREATE OR REPLACE TRIGGER zamestnanec_gen_pk
    BEFORE INSERT ON zamestnanec
    FOR EACH ROW
BEGIN
    :NEW.zamestnanecid := zamestnanecid_seq.nextval;
END;

-- PROCEDURA pobocka_pocet_zamestnancov
-- Při použití příkazu se vypíše error pokud je v databázi pobočka bez zaměstnanců.
CREATE OR REPLACE PROCEDURE pobocka_pocet_zamestnancov
AS CURSOR pocet_zamestnancu_na_pobocce IS
    SELECT nazev, pocet_zamestnancu
    FROM pobocka;
    BEGIN
        FOR pobocka IN pocet_zamestnancu_na_pobocce LOOP
            IF pobocka.pocet_zamestnancu < 1 THEN
                Raise_Application_Error(-20042, 'Pobočka nemá zaměstnance');
            END IF;           
            IF pobocka.pocet_zamestnancu > 4 THEN
                DBMS_OUTPUT.PUT_LINE('Na pobočce '|| pobocka.nazev ||' pracuje '|| pobocka.pocet_zamestnancu ||' zamestnaneců');
            ELSE
                DBMS_OUTPUT.PUT_LINE('Na pobočce '|| pobocka.nazev ||' pracuji '|| pobocka.pocet_zamestnancu ||' zamestnaneci');
            END IF;
        END LOOP;
END;

-- PROCEDURA ucty_nad50
-- Vypis učtů s zůstatkem nad 50000 kč.
CREATE OR REPLACE PROCEDURE ucty_nad50
AS castka ucet.zustatek%TYPE;
CURSOR ucty IS
SELECT ucet.nazev, ucet.zustatek
FROM ucet;
BEGIN
    FOR ucet IN ucty LOOP
        castka := ucet.zustatek;     
        IF castka > 50000 THEN
            dbms_output.put_line('Na ucte:'|| ucet.nazev ||' je: '|| ucet.zustatek ||'Kč');
        END IF;
    END LOOP;
END;

-- Index a Explain
SELECT zamestnanec.jmeno, zamestnanec.prijmeni, COUNT(klient.klientID)
FROM klient, zamestnanec 
WHERE klient.zamestnanecID = zamestnanec.zamestnanecID 
GROUP BY zamestnanec.jmeno, zamestnanec.prijmeni;

CREATE INDEX index_explain ON zamestnanec(jmeno, prijmeni);

EXPLAIN PLAN FOR
    SELECT zamestnanec.jmeno, zamestnanec.prijmeni, COUNT(klient.klientID)
    FROM klient, zamestnanec 
    WHERE klient.zamestnanecID = zamestnanec.zamestnanecID 
    GROUP BY zamestnanec.jmeno, zamestnanec.prijmeni;
SELECT * FROM TABLE(DBMS_XPLAN.display);

INSERT INTO pobocka (lokalita, nazev, pocet_zamestnancu) VALUES ('Brno', 'Banka v Brně', '2');
INSERT INTO pobocka (lokalita, nazev, pocet_zamestnancu) VALUES ('Praha', 'Banka v Prahe', '1');
INSERT INTO pobocka (lokalita, nazev, pocet_zamestnancu) VALUES ('Plzeň', 'Banka v Plzni', '0');

INSERT INTO zamestnanec (zamestnanecID, jmeno, prijmeni, adresa, lokalita) VALUES (NULL, 'Jan', 'Novák', 'Burešova 2', 'Brno');
INSERT INTO zamestnanec (zamestnanecID, jmeno, prijmeni, adresa, lokalita) VALUES (NULL, 'Jan', 'Květák', 'Dvořákova 10', 'Brno');
INSERT INTO zamestnanec (zamestnanecID, jmeno, prijmeni, adresa, lokalita) VALUES (NULL, 'Petra', 'Nováková', 'Burešova 2', 'Praha');

INSERT INTO klient (klientID, zamestnanecID, jmeno, prijmeni, adresa) VALUES (NULL, '1', 'Jindřich', 'Hájek', 'Adresa 1');
INSERT INTO klient (klientID, zamestnanecID, jmeno, prijmeni, adresa) VALUES (NULL, '3', 'Petr', 'Král', 'Adresa 2');
INSERT INTO klient (klientID, zamestnanecID, jmeno, prijmeni, adresa) VALUES (NULL, '1', 'Petra', 'Veselá', 'Adresa 3');
INSERT INTO klient (klientID, zamestnanecID, jmeno, prijmeni, adresa) VALUES (NULL, '3', 'Jana', 'Králová', 'Adresa 2');

INSERT INTO ucet (ucetID, klientID, nazev, zustatek, typ_uctu, pocet_disponentu) VALUES (NULL, '2', 'Petrův běžný účet', '120588', 'bezny', '0');
INSERT INTO ucet (ucetID, klientID, nazev, zustatek, typ_uctu, pocet_disponentu) VALUES (NULL, '2', 'Petrův spořící účet', '1250800', 'sporici', '0');
INSERT INTO ucet (ucetID, klientID, nazev, zustatek, typ_uctu, pocet_disponentu) VALUES (NULL, '2', 'Janin běžný účet', '6000', 'bezny', '1');
INSERT INTO ucet (ucetID, klientID, nazev, zustatek, typ_uctu, pocet_disponentu) VALUES (NULL, '1', 'Jindřichův účet', '85002', 'bezny', '0');

INSERT INTO sporici_ucet (ucetID, urok) VALUES ('2', '3');

INSERT INTO bezny_ucet (ucetID, limit) VALUES ('1', '200000');
INSERT INTO bezny_ucet (ucetID, limit) VALUES ('3', '500');
INSERT INTO bezny_ucet (ucetID, limit) VALUES ('4', '5000');

INSERT INTO sluzba (sluzbaID, typ_uctu, aktivovana, popis) VALUES (NULL, 'bezny', '1', 'Služba 1');
INSERT INTO sluzba (sluzbaID, typ_uctu, aktivovana, popis) VALUES (NULL, 'sporici', '1', 'Služba 2');

INSERT INTO dispozicni_pravo (pravoID, klientID, ucetID, typ_omezeni) VALUES (NULL, '4', '3', 'Dítě');

INSERT INTO internetove_bankovnictvi (interbankID, klientID, pocet_uctu) VALUES (NULL, '2', '3');
INSERT INTO internetove_bankovnictvi (interbankID, klientID, pocet_uctu) VALUES (NULL, '1', '1');

INSERT INTO platebni_karta (cislo_karty, klientID, ucetID, typ) VALUES (NULL, '2', '1', 'kreditni');
INSERT INTO platebni_karta (cislo_karty, klientID, ucetID, typ) VALUES (NULL, '4', '3', 'debitni');
INSERT INTO platebni_karta (cislo_karty, klientID, ucetID, typ) VALUES (NULL, '2', '3', 'debitni');


INSERT INTO transakce (transakceID, klientID, ucetID, druhy_ucetID, castka, cas, operace, zamestnanecID) VALUES (NULL, '1', '4', NULL, '3000', TIMESTAMP '2021-04-02 16:37:09', 'vyber', NULL);
INSERT INTO transakce (transakceID, klientID, ucetID, druhy_ucetID, castka, cas, operace, zamestnanecID) VALUES (NULL, '2', '1', '3', '1000', TIMESTAMP '2021-04-02 15:18:25', 'odeslani', NULL); 
INSERT INTO transakce (transakceID, klientID, ucetID, druhy_ucetID, castka, cas, operace, zamestnanecID) VALUES (NULL, '2', '3', '1', '1000', TIMESTAMP '2021-04-02 15:18:25', 'prijem', NULL);
INSERT INTO transakce (transakceID, klientID, ucetID, druhy_ucetID, castka, cas, operace, zamestnanecID) VALUES (NULL, '2', '1', '4', '5000', TIMESTAMP '2021-04-02 11:05:25', 'inkaso', '3');
INSERT INTO transakce (transakceID, klientID, ucetID, druhy_ucetID, castka, cas, operace, zamestnanecID) VALUES (NULL, '4', '3', NULL, '300', TIMESTAMP '2021-04-01 18:45:23', 'vyber', NULL);

COMMIT;

-- Vypíše jmeno a příjmení všech zaměstnanců pracující na pobočce Banka v Brně.
-- 2 tabulky
SELECT zamestnanec.jmeno, zamestnanec.prijmeni
FROM zamestnanec, pobocka
WHERE pobocka.lokalita = zamestnanec.lokalita AND pobocka.nazev = 'Banka v Brně';

-- Vypíše jmeno a příjmení všech klientů se zůstatkem více než 10000 na aspoň jednom účtě.
-- 2 tabulky
SELECT DISTINCT klient.jmeno, klient.prijmeni
FROM ucet, klient
WHERE klient.klientID = ucet.klientID AND ucet.zustatek > 10000;

-- Vypíše informace o transakcích z pobočky s názvem Banka v Prahe.
-- 3 tabulky
SELECT * FROM zamestnanec, pobocka, transakce
WHERE pobocka.nazev = 'Banka v Prahe' AND zamestnanec.lokalita = pobocka.lokalita AND zamestnanec.zamestnanecID = transakce.zamestnanecID;

-- Vypíše počet vytvořených klientů zaměstnancem.
-- GROUP BY
SELECT zamestnanec.jmeno, zamestnanec.prijmeni, COUNT(klient.klientID)
FROM klient, zamestnanec 
WHERE klient.zamestnanecID = zamestnanec.zamestnanecID 
GROUP BY zamestnanec.jmeno, zamestnanec.prijmeni;

-- Vypíše součet zůstatků na všech účtech jednoho klienta.
-- GROUP BY
SELECT klient.jmeno, klient.prijmeni, SUM(ucet.zustatek)
FROM ucet, klient 
WHERE klient.klientID = ucet.klientID 
GROUP BY klient.jmeno, klient.prijmeni;

-- Vypíše transakce mezi dvěmi existujicími učty v databázi.
-- EXISTS
SELECT * FROM transakce 
WHERE EXISTS
(
SELECT *
FROM ucet
WHERE transakce.druhy_ucetID = ucet.ucetID
);

-- Vypíše klienty které vlastní debitní platební kartu.
-- IN
SELECT klient.jmeno, klient.prijmeni FROM klient WHERE klient.klientID IN
(
    SELECT platebni_karta.klientID
    FROM platebni_karta
    WHERE platebni_karta.typ = 'debitni'
);

-- Priradenie práv
GRANT ALL ON bezny_ucet TO xolear00;
GRANT ALL ON dispozicni_pravo TO xolear00;
GRANT ALL ON internetove_bankovnictvi TO xolear00;
GRANT ALL ON klient TO xolear00;
GRANT ALL ON platebni_karta TO xolear00;
GRANT ALL ON pobocka TO xolear00;
GRANT ALL ON sluzba TO xolear00;
GRANT ALL ON sporici_ucet TO xolear00;
GRANT ALL ON transkace TO xolear00;
GRANT ALL ON ucet TO xolear00;
GRANT ALL ON zamestnanec TO xolear00;

DROP MATERIALIZED VIEW zustatkyNaUctech;
-- Vytvorí pohľad na tabuľku pre součty zůstatků na všech účtech jednoho klienta.
CREATE MATERIALIZED VIEW zustatkyNaUctech
BUILD IMMEDIATE
REFRESH COMPLETE
ON COMMIT
ENABLE QUERY REWRITE
AS
SELECT klient.jmeno, klient.prijmeni, SUM(ucet.zustatek)
FROM ucet, klient 
WHERE klient.klientID = ucet.klientID 
GROUP BY klient.jmeno, klient.prijmeni;

GRANT ALL ON zustatkyNaUctech TO xolear00;

-- bez commitu by se v 2. selectu neukazala změna.
SELECT * from zustatkyNaUctech;
INSERT INTO transakce (transakceID, klientID, ucetID, druhy_ucetID, castka, cas, operace, zamestnanecID) VALUES (NULL, '1', '4', NULL, '12345', TIMESTAMP '2021-04-02 16:37:09', 'vyber', NULL);
COMMIT;
SELECT * from zustatkyNaUctech;
